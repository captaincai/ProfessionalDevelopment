# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
width = 800
height = 600
WINDOW_SIZE = (width, height)
xUnit = width / 20
yUnit = height / 20  
score = 0
lives = 3
time = 0.0
highScore = 0
showHighScores = False
started = False

#ship constants
SHIP_ANGLE_VEL = 0.07
THRUST = 0.25
MISSILE_THRUST = THRUST * 100
FRICTION = 0.015
POWER_METER_POS = [width/2, yUnit * 3]
POWER_METER_RADIUS = 30

#clock display
clock = '' #clock string
clockCtr = [width/2, height/2 - 15]
clockRadius = 40
splitRadius = clockRadius * 1
splitPosition = [clockCtr[0], clockCtr[1] - clockRadius]

#asteroid constants
ROCK_ANGLE_VEL = SHIP_ANGLE_VEL * 0.45
ROCK_VELOCITY = THRUST * 9
ROCK_LIMIT = 12
rocks = []
rock_group = set([])
ROCK_SPAWN_MARGIN = 8

missile_group = set([])
explosions = set([])
EXPLOSION_SPEED = 1
sprites = {}

#nukes
dist_flown = 0
NUKE_SPAWN_SPEED = 800
NUKE_VELOCITY = 1
NUKE_SPAWN_MARGIN = ROCK_SPAWN_MARGIN * 1.1
NUKE_LIFESPAN = 900

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 6)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 38)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")
ship_explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_orange.png")
#explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_blue2.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

#shield
shield_info = ImageInfo([83, 83], [166, 166], 35)
#shield_info = ImageInfo([20, 20], [40, 40], 35)
#shield_image = simplegui.load_image("http://i.imgur.com/7saGQ.png")
#shield_image = simplegui.load_image("http://i.imgur.com/ziray.png")
shield_image = simplegui.load_image("http://i.imgur.com/pBK7v.png")

nuke_info = ImageInfo([15,15], [30, 30], 15, NUKE_LIFESPAN)    
nuke_image = simplegui.load_image("http://i.imgur.com/SKHqC.png")

# helper functions to handle transformations
random.seed()

def init_highScores():
    global highScores
    labels = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th']
    highScores = [{'name':'', 'score':0, 'label': labels[i]}  for i in range (10)]
init_highScores()  

def init_rocks():
    global rocks, rock_group
    
    rock_group = set([])    
    asteroidImages = ['asteroid_blue.png', 'asteroid_brown.png', 'asteroid_blend.png']
    rocks = [simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/" + name)  for name in asteroidImages]    

def init():
    global missile_group, exlosions, my_ship, sprites, time, lives, score, dist_flown, shots, hits
    dist_flown = 0
    score, hits, shots = 0, 0, 0
    lives = 3
    sprites = {}        
    missile_group = set([])
    explosions = set([])
    nukes = set([])
    init_rocks()
    soundtrack.pause()
    soundtrack.rewind()
    sprites = {'rocks':rock_group, 'missiles':missile_group, 'explosions':explosions, 'nukes':nukes}
    my_ship = Ship([width / 2, height / 2], [0, 0], 0, ship_image, ship_info)
    time = 0.0       

def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0]-q[0])**2+(p[1]-q[1])**2)

#image processing
def process_sprite_group(group, canvas):    
    global dist_flown

    remove = []
    for item in group:
        if item.update():
            if group == sprites['nukes']:
                dist_flown = 0
            remove.append(item)
            continue
        item.draw(canvas)
    group.difference_update(remove)
        
def group_collide(group, other_object):
    remove = [obj  for obj in group  if obj.collide(other_object)]
    
    group = group.difference_update(remove)     #eliminate collided objects       
    positions =[obj.get_position()  for obj in remove]    
    if not group == sprites['nukes']:
        for pos in positions:        
            explode(pos, explosion_image, explosion_info)

    return len(remove)

def group_group_collide(group1, group2):
    remove = []
    for obj in group1:
        
        if group_collide(group2, obj)  > 0:
            remove.append(obj)
    group1 = group1.difference_update(remove)
    
    return len(remove)

def draw_highScores(canvas):    
    
    leftBorder = (width/2 - splash_info.get_size()[0]/2)  
    margin = 10
    yUnit = height/20
    canvas.draw_text("High Scores", [width/2, height/2], 20, "White")

def update_highScore():
    global highScore
    if score > highScore:
        highScore = score
    
def destroy_ship():
    global my_ship, started
    
    pos = my_ship.get_position()
    ship_thrust_sound.pause()
    explode(pos, ship_explosion_image, explosion_info) 
    my_ship = None   
    started = False
    
def game_over():
    global started        
    started = False
    init()
    
# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
    
    def init_shields(self):
        result = set([])
        for i in range(1):
            pos = [self.pos[0] + self.radius + shield_info.get_center()[0], self.pos[1]]
            
            result.add(Sprite(pos, self.vel, 0, 0, shield_image, shield_info))
            
        sprites['shields'] = result
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def get_image_center(self):
        return self.image_center[:]
    
    def set_image_center(self, size):
        self.image_center = size
        
    def set_ship_image(thrusters=False):
        self.image_center = info.get_center() + self.image_size/2        
    
    def shoot(self):        
        global shots
        shots +=1        
        forward = [math.cos(self.angle), math.sin(self.angle)]    
        pos = [self.pos[i] + forward[i] * (1.3 * self.radius)   for i in range(2)]
        vel = [self.vel[i] + MISSILE_THRUST * forward[i]  for i in range(2)] 
        ang = self.angle
        ang_vel = self.angle_vel
        
        missile = Sprite(pos, vel, ang, ang_vel, missile_image, missile_info, missile_sound)
        missile_group.add(missile)
      
    def draw(self,canvas):  
        
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
    def update(self):
        global dist_flown                
        
        self.angle += self.angle_vel               
        newPos = [(self.pos[i] + self.vel[i]) % WINDOW_SIZE[i]  for i in range(2)]
        dist_flown += int(dist(newPos, self.pos))
        self.pos = newPos
        self.vel = [x * (1 - FRICTION)  for x in self.vel]  #friction        
        forward = [math.cos(self.angle), math.sin(self.angle)]        
        if self.thrust:            
            self.vel = [self.vel[i] + forward[i] * THRUST  for i in range(2)]     
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang        
        self.angle_vel = ang_vel
        
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0.0
        if sound:
            sound.rewind()
            sound.play()       
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def set_position(self, pos):
        self.pos = pos
    
    def set_image_center(self, center):
        self.image_center = center
        
    def draw(self, canvas):
        #canvas.draw_circle(self.pos, self.radius, 3, "Red", "Red")
        
        #sprite image        
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        #print self.radius, self.pos, 'vel:', self.vel, 'self.angle:', self.angle
            
        if self.animated:            
            
            spriteIndex = int(self.age)      
            
            xVal = (spriteIndex * self.image_size[0]) + self.image_size[0]/2.0
            yVal = self.image_center[1]
            ctr = [xVal, yVal]            
            
            self.image_center = ctr
                
        self.angle += self.angle_vel                     
            
        self.pos = [(self.pos[i] + self.vel[i]) % WINDOW_SIZE[i]  for i in range(2)]    
        if self.lifespan == NUKE_LIFESPAN and time%50 ==0:
            self.vel = [x * random.choice([-1,1])  for x in self.vel]            
        
        if self.animated:
            self.age += EXPLOSION_SPEED            
        else:
            self.age +=1
        
        return self.age > self.lifespan            
     
    def collide(self, other_object):      
        ctr1 = self.get_position()
        ctr2 = other_object.get_position()
        radius1 = self.get_radius()
        radius2 = other_object.get_radius()
        
        distance = dist(ctr1, ctr2)
        
        collision = distance < (radius1 + radius2) #collides if distance is less than radius
        return collision     

def inv_shooting_percentage():
    return (1/max(1,(hits/max(1,shots))))

def draw_background(canvas):
    # animate background
    center = debris_info.get_center()
    size = debris_info.get_size()
    wtime = (time / 8) % center[0]
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [width/2, height/2], [width, height])
    canvas.draw_image(debris_image, [center[0]-wtime, center[1]], [size[0]-2*wtime, size[1]], 
                                [width/2+1.25*wtime, height/2], [width-2.5*wtime, height])
    canvas.draw_image(debris_image, [size[0]-wtime, center[1]], [2*wtime, size[1]], 
                                [1.25*wtime, height/2], [2.5*wtime, height])

    #text info  
    canvas.draw_text("Lives: " + str(lives), [xUnit, 2*yUnit], 20, "Grey")
    canvas.draw_text("Score: " + str(score), [16.8*xUnit, 2*yUnit], 20, "Grey")
    canvas.draw_text(" High: " + str(highScore), [16.9*xUnit, yUnit], 20, "Purple")
    
def draw(canvas):
    global time, lives, score, hits    

    time += 1 
    draw_background(canvas)
    
    #collision check   
    if started:
        
        my_ship.draw(canvas)
        my_ship.update()
        
        #nuke collision check
        if group_collide(sprites['nukes'], my_ship) > 0:
            nuke()
        if group_collide(sprites['rocks'], my_ship) > 0:
            lives -=1
            if lives == 0:
                destroy_ship()                
    
    
    #check missile rock collisions                
    if group_group_collide(rock_group, missile_group) > 0:
        score +=1      
        hits +=1
    
    # update and draw ship and sprites        
    for group in sprites:
        process_sprite_group(sprites[group], canvas)

    # draw splash screen if not started
    if not started and len(sprites['explosions']) == 0:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [width/2, height/2], 
                          splash_info.get_size())
    
    if lives == 0 and len(sprites['explosions']) == 0:
        game_over()    
    nuke_spawner()
    update_highScore()
        
def explode(pos, exp_img, exp_inf):
    global explosions
    ang = random.random() * 2 * math.pi - math.pi
    explosion = Sprite(pos, [0, 0], ang, 0, exp_img, exp_inf, explosion_sound)
    sprites['explosions'].add(explosion)  

def nuke():
    global score, dist_flown
          
    remove = sprites['rocks']    
    
    positions =[obj.get_position()  for obj in remove]        
    score += int(len(remove) ** 2.2 * hits/max(1,shots))
    while len(remove) > 0:
        rock = remove.pop()
        pos = rock.get_position()
        explode(pos, explosion_image, explosion_info) 
        score +=1
    dist_flown = 0
    
    
def spawn_rock(): 
    ang_vel = random.random() * 2 * ROCK_ANGLE_VEL - ROCK_ANGLE_VEL    
    ang = random.random() * 2 * math.pi - math.pi       
    vel = [random.random() * 2 * ROCK_VELOCITY - ROCK_VELOCITY  for i in range(2)]    
    
    pos = [random.randrange(0, width), random.randrange(0, height)] 
    while dist(pos, my_ship.get_position()) < my_ship.get_radius() * ROCK_SPAWN_MARGIN: #safety spawn margin
        pos = [random.randrange(0, width), random.randrange(0, height)] 
        
    img = random.choice(rocks)
    return Sprite(pos, vel, ang, ang_vel, img, asteroid_info)
    
# timer handler that spawns a rock    
def rock_spawner():    
    global sprites
    
    if score//3 >= len(sprites['rocks']) < ROCK_LIMIT and len(sprites['explosions']) == 0 and started:
        sprites['rocks'].add(spawn_rock())    
     
#nuke spawner
def nuke_spawner():
    global sprites, dist_flown           
    
    x = inv_shooting_percentage()
    if (dist_flown >= (x * NUKE_SPAWN_SPEED / (max(score**0.5,1) / 10))) and len(sprites['nukes']) == 0:
        ang_vel, ang = 0, 0    
        vel = [random.choice([-1, 1]) * NUKE_VELOCITY  for i in range(2)]        
        pos = [random.randrange(0, width), random.randrange(0, height)] 
        while dist(pos, my_ship.get_position()) < my_ship.get_radius() * NUKE_SPAWN_MARGIN: #safety spawn margin
            pos = [random.randrange(0, width), random.randrange(0, height)]
        bomb = Sprite(pos, vel, ang, ang_vel, nuke_image, nuke_info)        
        sprites['nukes'].add(bomb)
        dist_flown = 0            
    
# initialize frame
frame = simplegui.create_frame("Asteroids", width, height)

# initialize ship and two sprites
init()

#keydown handler        
def keydown(key):
    global showHighScores
    
    if started:    
        if key == simplegui.KEY_MAP["left"]:        
            my_ship.angle_vel = -SHIP_ANGLE_VEL
        if key == simplegui.KEY_MAP["right"]:
            my_ship.angle_vel = SHIP_ANGLE_VEL            
        if (key == simplegui.KEY_MAP["up"] or key == simplegui.KEY_MAP["s"]) and not my_ship.thrust:        
            my_ship.thrust = True   
            ctr = my_ship.get_image_center()
            ctr[0] += my_ship.image_size[0]
            #my_ship.image_center[0] += my_ship.image_size[1]
            my_ship.set_image_center(ctr)
            ship_thrust_sound.play()
        if key == simplegui.KEY_MAP["space"]:
            my_ship.shoot()
        
#keyup handler
def keyup(key):    
    if started:
        if key == simplegui.KEY_MAP["left"] or key == simplegui.KEY_MAP["right"]:        
            my_ship.angle_vel = 0
        if (key == simplegui.KEY_MAP["up"] or key == simplegui.KEY_MAP["s"]):    
            my_ship.thrust = False 
            #my_ship.image_center[0] -= my_ship.image_size[1]
            ctr = my_ship.get_image_center()
            ctr[0] -= my_ship.image_size[0]            
            my_ship.set_image_center(ctr)
            ship_thrust_sound.pause()
            ship_thrust_sound.rewind()

# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started
    center = [width / 2, height / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True        
        init()
        soundtrack.play()
        
# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(100.0, rock_spawner)


# get things rolling
timer.start()
frame.start()