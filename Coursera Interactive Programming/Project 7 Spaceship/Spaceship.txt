# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
width = 800
height = 600
WINDOW_SIZE = (width, height)
score = 0
lives = 3
time = 0

#ship constants
SHIP_ANGLE_VEL = 0.1
THRUST = 0.35
MISSILE_THRUST = THRUST * 100
FRICTION = 0.02

#asteroid constants
ROCK_ANGLE_VEL = SHIP_ANGLE_VEL * 0.4
ROCK_VELOCITY = THRUST * 5
ROCK_VELOCITY_INTERVAL = 0.1


class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0]-q[0])**2+(p[1]-q[1])**2)

random.seed()

# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):     
        
        #canvas.draw_circle(self.pos, self.radius, 1, "White", "White")               
            
        #ship image        
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def set_ship_image(thrusters=False):
        self.image_center = info.get_center() + self.image_size/2        
    
    def shoot(self):
        global a_missile
        
        forward = [math.cos(self.angle), math.sin(self.angle)]    
        pos = [self.pos[i] + forward[i] * (1.3 * self.radius)   for i in range(2)]
        vel = [self.vel[i] + MISSILE_THRUST * forward[i]  for i in range(2)] 
        ang = self.angle
        ang_vel = self.angle_vel
        a_missile = Sprite(pos, vel, ang, ang_vel, missile_image, missile_info, missile_sound)
        #a_missile = Sprite(pos, [2 * width / 3, 2 * height / 3], [-1,1], 0, 0, missile_image, missile_info, missile_sound)
        
    def wrap_position(self):        
        newPos = self.pos[:]        
        if newPos[0] and newPos[1]:
            for i in range(2):
                if self.pos[i] > WINDOW_SIZE[i]:
                    newPos[i] = self.pos[i] - WINDOW_SIZE[i]               
                if self.pos[i] < 0:
                    newPos[i] = self.pos[i] + WINDOW_SIZE[i]                   
        self.pos = newPos
    
    def update(self):
        #print 'ship:', self.pos, 'angle:', self.angle
        
        self.angle += self.angle_vel               
        self.pos = [ self.pos[i] + self.vel[i]  for i in range(2)]
        self.wrap_position()        
        self.vel = [x * (1 - FRICTION)  for x in self.vel]  #friction        
        forward = [math.cos(self.angle), math.sin(self.angle)]        
        if self.thrust:            
            self.vel = [self.vel[i] + forward[i] * THRUST  for i in range(2)]     
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang        
        self.angle_vel = ang_vel
        
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        #canvas.draw_circle(self.pos, self.radius, 3, "Red", "Red")
        
        #sprite image
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        #print self.radius, self.pos, 'vel:', self.vel, 'self.angle:', self.angle
        self.angle += self.angle_vel             
        self.pos = [ self.pos[i] + self.vel[i]  for i in range(2)]        
           
def draw(canvas):
    global time
    
    # animiate background
    time += 1
    center = debris_info.get_center()
    size = debris_info.get_size()
    wtime = (time / 8) % center[0]
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [width/2, height/2], [width, height])
    canvas.draw_image(debris_image, [center[0]-wtime, center[1]], [size[0]-2*wtime, size[1]], 
                                [width/2+1.25*wtime, height/2], [width-2.5*wtime, height])
    canvas.draw_image(debris_image, [size[0]-wtime, center[1]], [2*wtime, size[1]], 
                                [1.25*wtime, height/2], [2.5*wtime, height])
    
    #text info
    xUnit = width / 20
    yUnit = height / 20    
    canvas.draw_text("Lives: " + str(lives), [xUnit, 2*yUnit], 20, "Grey")
    canvas.draw_text("Score: " + str(score), [16.8*xUnit, 2*yUnit], 20, "Grey")
    
    # draw ship and sprites
    my_ship.draw(canvas)
    a_rock.draw(canvas)
    a_missile.draw(canvas)
    
    # update ship and sprites
    my_ship.update()
    a_rock.update()
    a_missile.update()

def spawn_rock():
    a = -ROCK_ANGLE_VEL
    b = ROCK_ANGLE_VEL
    ang_vel = random.random() * (b - a) + a
    
    va = ROCK_VELOCITY
    vb = -ROCK_VELOCITY
    vel = [random.random() * (vb - va) + va  for i in range(2)]
    
    a = math.pi
    b = 2 * math.pi
    ang = random.random() * (b - a) + b  
    
    pos = [random.randrange(0, width), random.randrange(0, height)] 
    
    return Sprite(pos, vel, ang, ang_vel, asteroid_image, asteroid_info)
    
# timer handler that spawns a rock    
def rock_spawner():
    global a_rock
    a_rock = spawn_rock()
    
# initialize frame
frame = simplegui.create_frame("Asteroids", width, height)

# initialize ship and two sprites
my_ship = Ship([width / 2, height / 2], [0, 0], 0, ship_image, ship_info)
#a_rock = Sprite([width / 3, height / 3], [1, 1], 0, 0, asteroid_image, asteroid_info)
a_rock = spawn_rock()
a_missile = Sprite([2 * width / 3, 2 * height / 3], [0,0], 0, 0, missile_image, missile_info, missile_sound)


#keydown handler        
def keydown(key):           
    if key == simplegui.KEY_MAP["left"]:        
        my_ship.angle_vel = -SHIP_ANGLE_VEL
    if key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = SHIP_ANGLE_VEL            
    if key == simplegui.KEY_MAP["up"] and not my_ship.thrust:        
        my_ship.thrust = True   
        my_ship.image_center[0] += my_ship.image_size[1]
        ship_thrust_sound.play()
    if key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()
        
#keyup handler
def keyup(key):    
    if key == simplegui.KEY_MAP["left"] or key == simplegui.KEY_MAP["right"]:        
        my_ship.angle_vel = 0
    if key == simplegui.KEY_MAP["up"]:    
        my_ship.thrust = False 
        my_ship.image_center[0] -= my_ship.image_size[1]
        ship_thrust_sound.pause()
        ship_thrust_sound.rewind()

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
