# Mini-project #6 - Blackjack

import simplegui
import random

board_img = simplegui.load_image("http://i.imgur.com/PJ4IE.jpg")    
BOARD_SIZE = (board_img.get_width(), board_img.get_height())
BOARD_CENTER = (board_img.get_width()/2, board_img.get_height()/2)

#WINDOW_HEIGHT = 600
#WINDOW_WIDTH = 600
WINDOW_HEIGHT = board_img.get_height()
WINDOW_WIDTH = board_img.get_width()
WINDOW_SIZE = (WINDOW_WIDTH, WINDOW_HEIGHT)
WINDOW_CENTER =  (WINDOW_WIDTH/2, WINDOW_HEIGHT/2)

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

DECK_STACK_POS = (517, 58)
DECK_STACK_SIZE = (CARD_BACK_SIZE[0]*.51, CARD_BACK_SIZE[1]*.51)

PLAYERS = ['Player', 'Dealer']


# initialize some useful global variables
in_play = False
outcome = ""
msg = ''
score = 0
hands = [None, None]

def init():
    return
# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos, exposed=True):
        img = card_images
        size = CARD_SIZE
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        if not exposed:
            img = card_back        
            size = CARD_BACK_SIZE
            card_loc = CARD_BACK_CENTER
            
        canvas.draw_image(img, card_loc, size, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []

    def __str__(self):
        cards = [str(card) for card in self.hand]
        return '[' + ', '.join(cards) + ']'
    
    def get_total(self):
        total = sum([VALUES[card.get_rank()]  for card in self.hand])       
        return total
    
    def add_card(self, card):
        self.hand.append(card)
    
    def hit(self):
        card = deck.deal_card()
        self.add_card(card)                     
                      
    def has_ace(self):
        if 'A' in [card.get_rank()  for card in self.hand]:
            return True            
        
    # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust 
    def get_value(self):
        value = self.get_total()
        if self.has_ace():
            if value + 10 <= 21:
                return value + 10         
        return value                     

    def busted(self):
        return self.get_value() > 21
    
    def draw(self, canvas, p, hideHole=False):
        width = CARD_SIZE[1]
        pos = list(p)
        for i in range(len(self.hand)):  
            expose = True            
            if i == 0 and hideHole: expose = False            
            self.hand[i].draw(canvas, pos, expose)
            pos[0] += width /3 
        
# define deck class
class Deck:
    def __init__(self):
        self.deck = [Card(suit, rank) for suit in SUITS  for rank in RANKS  ]
            
    def __str__(self):             
        
        cards = [str(card) for card in self.deck]
        return '[' + ', '.join(cards) + ']'        
    
    # add cards back to deck and shuffle
    def shuffle(self):
        random.shuffle(self.deck)
   
    def deal_card(self):
        if len(self.deck) == 0:
            return None
        else:            
            return self.deck.pop(random.randrange(len(self.deck)))

#define event handlers for buttons  
def deal():
    global outcome, in_play, hands, deck, msg, score
    if in_play: score -=1
    deck = Deck()
    deck.shuffle()
    for p in PLAYERS:        
        hand = Hand()
        for i in range(2):
            hand.add_card(deck.deal_card())          
        hands[PLAYERS.index(p)] = hand
    msg = 'Another card?'        
    in_play = True

def hit():    
    global score, in_play, msg
    # if the hand is in play, hit the player
    hand = hands[PLAYERS.index('Player')]    
    if in_play:
        hand.hit()
        # if busted, assign an message to outcome, update in_play and score
        if hand.get_value() > 21:
            msg = 'You busted. New deal?'
            in_play = False
            score -=1             
        
def determine_outcome():
    global score      
    for i in range(len(PLAYERS)):
        if hands[i].get_value() > 21:
            if i == 1: score +=1                
            return PLAYERS[i] + ' busts, ' + PLAYERS[(i+1) % len(PLAYERS)] + ' wins!'         
    if hands[0].get_value() > hands[1].get_value():
        score +=1
        return 'Player wins! New deal?'
    score -=1
    return 'Dealer wins. New deal?'  
    
def stand():  
    global outcome, in_play, msg
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play:             
        hand = hands[PLAYERS.index('Dealer')]    
        while hand.get_value() < 17:
            hand.hit()            
        # assign a message to outcome, update in_play and score
        outcome = determine_outcome()	 
        msg = outcome
        in_play = False        
    elif hands[0].get_value() > 21:
        outcome = "You busted. New deal?"   
    
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below    
    positions = [(WINDOW_WIDTH / 2.75, (WINDOW_HEIGHT / 10)*7 ) , (WINDOW_WIDTH / 2.75, (WINDOW_HEIGHT / 10)*2)]
    canvas.draw_image(board_img, BOARD_CENTER, BOARD_SIZE,
                      WINDOW_CENTER, WINDOW_SIZE)
    canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (517, 58), (CARD_BACK_SIZE[0]*.51, CARD_BACK_SIZE[1]*.51), 90)    
    canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (53, 50), (CARD_BACK_SIZE[0]*.42, CARD_BACK_SIZE[1]*.42), 0.16)    
    #draw hands
    for i in range(2):
        hideHole = False
        if i == 1 and in_play: hideHole = True
        hands[i].draw(canvas, positions[i], hideHole)    
    #draw values
    for i in range(2):
        if i == 0 or (i == 1 and not in_play):
            text = PLAYERS[i] + ' has ' + str(hands[i].get_value())
            canvas.draw_text(text, (positions[i][0],positions[i][1] -10), 18, "White")
    canvas.draw_text(msg, (positions[0][0], WINDOW_HEIGHT/2+20), 22, "White")
    canvas.draw_text("Blackjack", (10, WINDOW_HEIGHT - 10), 26, "Grey")    
    canvas.draw_text("Score: " +str(score), (WINDOW_WIDTH - 100, WINDOW_HEIGHT - 10), 20, "Green")    
    
    
# initialization frame
frame = simplegui.create_frame("Blackjack", WINDOW_WIDTH, WINDOW_HEIGHT)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# deal an initial hand

# get things rolling
frame.start()
deal()
#test()

# remember to review the gradic rubric